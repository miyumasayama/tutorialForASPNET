// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace SelfAspNet.CompiledModels
{
    public partial class MyContextModel
    {
        partial void Initialize()
        {
            var authorBook = AuthorBookEntityType.Create(this);
            var article = ArticleEntityType.Create(this);
            var author = AuthorEntityType.Create(this);
            var book = BookEntityType.Create(this);
            var errorLog = ErrorLogEntityType.Create(this);
            var meta = MetaEntityType.Create(this);
            var review = ReviewEntityType.Create(this);
            var user = UserEntityType.Create(this);

            AuthorBookEntityType.CreateForeignKey1(authorBook, author);
            AuthorBookEntityType.CreateForeignKey2(authorBook, book);
            AuthorEntityType.CreateForeignKey1(author, user);
            ReviewEntityType.CreateForeignKey1(review, book);

            AuthorEntityType.CreateSkipNavigation1(author, book, authorBook);
            BookEntityType.CreateSkipNavigation1(book, author, authorBook);

            AuthorBookEntityType.CreateAnnotations(authorBook);
            ArticleEntityType.CreateAnnotations(article);
            AuthorEntityType.CreateAnnotations(author);
            BookEntityType.CreateAnnotations(book);
            ErrorLogEntityType.CreateAnnotations(errorLog);
            MetaEntityType.CreateAnnotations(meta);
            ReviewEntityType.CreateAnnotations(review);
            UserEntityType.CreateAnnotations(user);

            AddAnnotation("ProductVersion", "8.0.1");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var authorBook = FindEntityType("AuthorBook")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            authorBook.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var authorBookTableBase = new TableBase("AuthorBook", null, relationalModel);
            var authorsIdColumnBase = new ColumnBase<ColumnMappingBase>("AuthorsId", "int", authorBookTableBase);
            authorBookTableBase.Columns.Add("AuthorsId", authorsIdColumnBase);
            var booksIdColumnBase = new ColumnBase<ColumnMappingBase>("BooksId", "int", authorBookTableBase);
            authorBookTableBase.Columns.Add("BooksId", booksIdColumnBase);
            relationalModel.DefaultTables.Add("AuthorBook", authorBookTableBase);
            var authorBookMappingBase = new TableMappingBase<ColumnMappingBase>(authorBook, authorBookTableBase, true);
            authorBookTableBase.AddTypeMapping(authorBookMappingBase, false);
            defaultTableMappings.Add(authorBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)authorsIdColumnBase, authorBook.FindProperty("AuthorsId")!, authorBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)booksIdColumnBase, authorBook.FindProperty("BooksId")!, authorBookMappingBase);

            var tableMappings = new List<TableMapping>();
            authorBook.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var authorBookTable = new Table("AuthorBook", null, relationalModel);
            var booksIdColumn = new Column("BooksId", "int", authorBookTable);
            authorBookTable.Columns.Add("BooksId", booksIdColumn);
            var authorsIdColumn = new Column("AuthorsId", "int", authorBookTable);
            authorBookTable.Columns.Add("AuthorsId", authorsIdColumn);
            var pK_AuthorBook = new UniqueConstraint("PK_AuthorBook", authorBookTable, new[] { booksIdColumn, authorsIdColumn });
            authorBookTable.PrimaryKey = pK_AuthorBook;
            var pK_AuthorBookUc = RelationalModel.GetKey(this,
                "AuthorBook",
                new[] { "BooksId", "AuthorsId" });
            pK_AuthorBook.MappedKeys.Add(pK_AuthorBookUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AuthorBookUc).Add(pK_AuthorBook);
            authorBookTable.UniqueConstraints.Add("PK_AuthorBook", pK_AuthorBook);
            var iX_AuthorBook_AuthorsId = new TableIndex(
            "IX_AuthorBook_AuthorsId", authorBookTable, new[] { authorsIdColumn }, false);
            var iX_AuthorBook_AuthorsIdIx = RelationalModel.GetIndex(this,
                "AuthorBook",
                new[] { "AuthorsId" });
            iX_AuthorBook_AuthorsId.MappedIndexes.Add(iX_AuthorBook_AuthorsIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_AuthorBook_AuthorsIdIx).Add(iX_AuthorBook_AuthorsId);
            authorBookTable.Indexes.Add("IX_AuthorBook_AuthorsId", iX_AuthorBook_AuthorsId);
            relationalModel.Tables.Add(("AuthorBook", null), authorBookTable);
            var authorBookTableMapping = new TableMapping(authorBook, authorBookTable, true);
            authorBookTable.AddTypeMapping(authorBookTableMapping, false);
            tableMappings.Add(authorBookTableMapping);
            RelationalModel.CreateColumnMapping(authorsIdColumn, authorBook.FindProperty("AuthorsId")!, authorBookTableMapping);
            RelationalModel.CreateColumnMapping(booksIdColumn, authorBook.FindProperty("BooksId")!, authorBookTableMapping);

            var article = FindEntityType("SelfAspNet.Models.Article")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            article.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var selfAspNetModelsArticleTableBase = new TableBase("SelfAspNet.Models.Article", null, relationalModel);
            var categoryColumnBase = new ColumnBase<ColumnMappingBase>("Category", "nvarchar(max)", selfAspNetModelsArticleTableBase);
            selfAspNetModelsArticleTableBase.Columns.Add("Category", categoryColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "int", selfAspNetModelsArticleTableBase);
            selfAspNetModelsArticleTableBase.Columns.Add("Id", idColumnBase);
            var titleColumnBase = new ColumnBase<ColumnMappingBase>("Title", "nvarchar(max)", selfAspNetModelsArticleTableBase);
            selfAspNetModelsArticleTableBase.Columns.Add("Title", titleColumnBase);
            var urlColumnBase = new ColumnBase<ColumnMappingBase>("Url", "nvarchar(max)", selfAspNetModelsArticleTableBase);
            selfAspNetModelsArticleTableBase.Columns.Add("Url", urlColumnBase);
            relationalModel.DefaultTables.Add("SelfAspNet.Models.Article", selfAspNetModelsArticleTableBase);
            var selfAspNetModelsArticleMappingBase = new TableMappingBase<ColumnMappingBase>(article, selfAspNetModelsArticleTableBase, true);
            selfAspNetModelsArticleTableBase.AddTypeMapping(selfAspNetModelsArticleMappingBase, false);
            defaultTableMappings0.Add(selfAspNetModelsArticleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, article.FindProperty("Id")!, selfAspNetModelsArticleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)categoryColumnBase, article.FindProperty("Category")!, selfAspNetModelsArticleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase, article.FindProperty("Title")!, selfAspNetModelsArticleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)urlColumnBase, article.FindProperty("Url")!, selfAspNetModelsArticleMappingBase);

            var tableMappings0 = new List<TableMapping>();
            article.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var articlesTable = new Table("Articles", null, relationalModel);
            var idColumn = new Column("Id", "int", articlesTable);
            articlesTable.Columns.Add("Id", idColumn);
            var categoryColumn = new Column("Category", "nvarchar(max)", articlesTable);
            articlesTable.Columns.Add("Category", categoryColumn);
            var titleColumn = new Column("Title", "nvarchar(max)", articlesTable);
            articlesTable.Columns.Add("Title", titleColumn);
            var urlColumn = new Column("Url", "nvarchar(max)", articlesTable);
            articlesTable.Columns.Add("Url", urlColumn);
            var pK_Articles = new UniqueConstraint("PK_Articles", articlesTable, new[] { idColumn });
            articlesTable.PrimaryKey = pK_Articles;
            var pK_ArticlesUc = RelationalModel.GetKey(this,
                "SelfAspNet.Models.Article",
                new[] { "Id" });
            pK_Articles.MappedKeys.Add(pK_ArticlesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ArticlesUc).Add(pK_Articles);
            articlesTable.UniqueConstraints.Add("PK_Articles", pK_Articles);
            relationalModel.Tables.Add(("Articles", null), articlesTable);
            var articlesTableMapping = new TableMapping(article, articlesTable, true);
            articlesTable.AddTypeMapping(articlesTableMapping, false);
            tableMappings0.Add(articlesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, article.FindProperty("Id")!, articlesTableMapping);
            RelationalModel.CreateColumnMapping(categoryColumn, article.FindProperty("Category")!, articlesTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn, article.FindProperty("Title")!, articlesTableMapping);
            RelationalModel.CreateColumnMapping(urlColumn, article.FindProperty("Url")!, articlesTableMapping);

            var author = FindEntityType("SelfAspNet.Models.Author")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            author.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var selfAspNetModelsAuthorTableBase = new TableBase("SelfAspNet.Models.Author", null, relationalModel);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "int", selfAspNetModelsAuthorTableBase);
            selfAspNetModelsAuthorTableBase.Columns.Add("Id", idColumnBase0);
            var penNameColumnBase = new ColumnBase<ColumnMappingBase>("PenName", "nvarchar(max)", selfAspNetModelsAuthorTableBase);
            selfAspNetModelsAuthorTableBase.Columns.Add("PenName", penNameColumnBase);
            var userIdColumnBase = new ColumnBase<ColumnMappingBase>("UserId", "int", selfAspNetModelsAuthorTableBase);
            selfAspNetModelsAuthorTableBase.Columns.Add("UserId", userIdColumnBase);
            relationalModel.DefaultTables.Add("SelfAspNet.Models.Author", selfAspNetModelsAuthorTableBase);
            var selfAspNetModelsAuthorMappingBase = new TableMappingBase<ColumnMappingBase>(author, selfAspNetModelsAuthorTableBase, true);
            selfAspNetModelsAuthorTableBase.AddTypeMapping(selfAspNetModelsAuthorMappingBase, false);
            defaultTableMappings1.Add(selfAspNetModelsAuthorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, author.FindProperty("Id")!, selfAspNetModelsAuthorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)penNameColumnBase, author.FindProperty("PenName")!, selfAspNetModelsAuthorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)userIdColumnBase, author.FindProperty("UserId")!, selfAspNetModelsAuthorMappingBase);

            var tableMappings1 = new List<TableMapping>();
            author.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var authorsTable = new Table("Authors", null, relationalModel);
            var idColumn0 = new Column("Id", "int", authorsTable);
            authorsTable.Columns.Add("Id", idColumn0);
            var penNameColumn = new Column("PenName", "nvarchar(max)", authorsTable);
            authorsTable.Columns.Add("PenName", penNameColumn);
            var userIdColumn = new Column("UserId", "int", authorsTable);
            authorsTable.Columns.Add("UserId", userIdColumn);
            var pK_Authors = new UniqueConstraint("PK_Authors", authorsTable, new[] { idColumn0 });
            authorsTable.PrimaryKey = pK_Authors;
            var pK_AuthorsUc = RelationalModel.GetKey(this,
                "SelfAspNet.Models.Author",
                new[] { "Id" });
            pK_Authors.MappedKeys.Add(pK_AuthorsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_AuthorsUc).Add(pK_Authors);
            authorsTable.UniqueConstraints.Add("PK_Authors", pK_Authors);
            var iX_Authors_UserId = new TableIndex(
            "IX_Authors_UserId", authorsTable, new[] { userIdColumn }, true);
            var iX_Authors_UserIdIx = RelationalModel.GetIndex(this,
                "SelfAspNet.Models.Author",
                new[] { "UserId" });
            iX_Authors_UserId.MappedIndexes.Add(iX_Authors_UserIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Authors_UserIdIx).Add(iX_Authors_UserId);
            authorsTable.Indexes.Add("IX_Authors_UserId", iX_Authors_UserId);
            relationalModel.Tables.Add(("Authors", null), authorsTable);
            var authorsTableMapping = new TableMapping(author, authorsTable, true);
            authorsTable.AddTypeMapping(authorsTableMapping, false);
            tableMappings1.Add(authorsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, author.FindProperty("Id")!, authorsTableMapping);
            RelationalModel.CreateColumnMapping(penNameColumn, author.FindProperty("PenName")!, authorsTableMapping);
            RelationalModel.CreateColumnMapping(userIdColumn, author.FindProperty("UserId")!, authorsTableMapping);

            var book = FindEntityType("SelfAspNet.Models.Book")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            book.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var selfAspNetModelsBookTableBase = new TableBase("SelfAspNet.Models.Book", null, relationalModel);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "int", selfAspNetModelsBookTableBase);
            selfAspNetModelsBookTableBase.Columns.Add("Id", idColumnBase1);
            var isbnColumnBase = new ColumnBase<ColumnMappingBase>("Isbn", "nvarchar(max)", selfAspNetModelsBookTableBase);
            selfAspNetModelsBookTableBase.Columns.Add("Isbn", isbnColumnBase);
            var priceColumnBase = new ColumnBase<ColumnMappingBase>("Price", "int", selfAspNetModelsBookTableBase);
            selfAspNetModelsBookTableBase.Columns.Add("Price", priceColumnBase);
            var publishedColumnBase = new ColumnBase<ColumnMappingBase>("Published", "datetime2", selfAspNetModelsBookTableBase);
            selfAspNetModelsBookTableBase.Columns.Add("Published", publishedColumnBase);
            var publisherColumnBase = new ColumnBase<ColumnMappingBase>("Publisher", "nvarchar(max)", selfAspNetModelsBookTableBase);
            selfAspNetModelsBookTableBase.Columns.Add("Publisher", publisherColumnBase);
            var sampleColumnBase = new ColumnBase<ColumnMappingBase>("Sample", "bit", selfAspNetModelsBookTableBase);
            selfAspNetModelsBookTableBase.Columns.Add("Sample", sampleColumnBase);
            var titleColumnBase0 = new ColumnBase<ColumnMappingBase>("Title", "nvarchar(max)", selfAspNetModelsBookTableBase);
            selfAspNetModelsBookTableBase.Columns.Add("Title", titleColumnBase0);
            relationalModel.DefaultTables.Add("SelfAspNet.Models.Book", selfAspNetModelsBookTableBase);
            var selfAspNetModelsBookMappingBase = new TableMappingBase<ColumnMappingBase>(book, selfAspNetModelsBookTableBase, true);
            selfAspNetModelsBookTableBase.AddTypeMapping(selfAspNetModelsBookMappingBase, false);
            defaultTableMappings2.Add(selfAspNetModelsBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, book.FindProperty("Id")!, selfAspNetModelsBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isbnColumnBase, book.FindProperty("Isbn")!, selfAspNetModelsBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)priceColumnBase, book.FindProperty("Price")!, selfAspNetModelsBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)publishedColumnBase, book.FindProperty("Published")!, selfAspNetModelsBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)publisherColumnBase, book.FindProperty("Publisher")!, selfAspNetModelsBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sampleColumnBase, book.FindProperty("Sample")!, selfAspNetModelsBookMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase0, book.FindProperty("Title")!, selfAspNetModelsBookMappingBase);

            var tableMappings2 = new List<TableMapping>();
            book.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var booksTable = new Table("Books", null, relationalModel);
            var idColumn1 = new Column("Id", "int", booksTable);
            booksTable.Columns.Add("Id", idColumn1);
            var isbnColumn = new Column("Isbn", "nvarchar(max)", booksTable);
            booksTable.Columns.Add("Isbn", isbnColumn);
            var priceColumn = new Column("Price", "int", booksTable);
            booksTable.Columns.Add("Price", priceColumn);
            var publishedColumn = new Column("Published", "datetime2", booksTable);
            booksTable.Columns.Add("Published", publishedColumn);
            var publisherColumn = new Column("Publisher", "nvarchar(max)", booksTable);
            booksTable.Columns.Add("Publisher", publisherColumn);
            var sampleColumn = new Column("Sample", "bit", booksTable);
            booksTable.Columns.Add("Sample", sampleColumn);
            var titleColumn0 = new Column("Title", "nvarchar(max)", booksTable);
            booksTable.Columns.Add("Title", titleColumn0);
            var pK_Books = new UniqueConstraint("PK_Books", booksTable, new[] { idColumn1 });
            booksTable.PrimaryKey = pK_Books;
            var pK_BooksUc = RelationalModel.GetKey(this,
                "SelfAspNet.Models.Book",
                new[] { "Id" });
            pK_Books.MappedKeys.Add(pK_BooksUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_BooksUc).Add(pK_Books);
            booksTable.UniqueConstraints.Add("PK_Books", pK_Books);
            relationalModel.Tables.Add(("Books", null), booksTable);
            var booksTableMapping = new TableMapping(book, booksTable, true);
            booksTable.AddTypeMapping(booksTableMapping, false);
            tableMappings2.Add(booksTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, book.FindProperty("Id")!, booksTableMapping);
            RelationalModel.CreateColumnMapping(isbnColumn, book.FindProperty("Isbn")!, booksTableMapping);
            RelationalModel.CreateColumnMapping(priceColumn, book.FindProperty("Price")!, booksTableMapping);
            RelationalModel.CreateColumnMapping(publishedColumn, book.FindProperty("Published")!, booksTableMapping);
            RelationalModel.CreateColumnMapping(publisherColumn, book.FindProperty("Publisher")!, booksTableMapping);
            RelationalModel.CreateColumnMapping(sampleColumn, book.FindProperty("Sample")!, booksTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn0, book.FindProperty("Title")!, booksTableMapping);

            var errorLog = FindEntityType("SelfAspNet.Models.ErrorLog")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            errorLog.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var selfAspNetModelsErrorLogTableBase = new TableBase("SelfAspNet.Models.ErrorLog", null, relationalModel);
            var accessedColumnBase = new ColumnBase<ColumnMappingBase>("Accessed", "datetime2", selfAspNetModelsErrorLogTableBase);
            selfAspNetModelsErrorLogTableBase.Columns.Add("Accessed", accessedColumnBase);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "int", selfAspNetModelsErrorLogTableBase);
            selfAspNetModelsErrorLogTableBase.Columns.Add("Id", idColumnBase2);
            var messageColumnBase = new ColumnBase<ColumnMappingBase>("Message", "nvarchar(max)", selfAspNetModelsErrorLogTableBase);
            selfAspNetModelsErrorLogTableBase.Columns.Add("Message", messageColumnBase);
            var pathColumnBase = new ColumnBase<ColumnMappingBase>("Path", "nvarchar(max)", selfAspNetModelsErrorLogTableBase);
            selfAspNetModelsErrorLogTableBase.Columns.Add("Path", pathColumnBase);
            var stacktraceColumnBase = new ColumnBase<ColumnMappingBase>("Stacktrace", "nvarchar(max)", selfAspNetModelsErrorLogTableBase);
            selfAspNetModelsErrorLogTableBase.Columns.Add("Stacktrace", stacktraceColumnBase);
            relationalModel.DefaultTables.Add("SelfAspNet.Models.ErrorLog", selfAspNetModelsErrorLogTableBase);
            var selfAspNetModelsErrorLogMappingBase = new TableMappingBase<ColumnMappingBase>(errorLog, selfAspNetModelsErrorLogTableBase, true);
            selfAspNetModelsErrorLogTableBase.AddTypeMapping(selfAspNetModelsErrorLogMappingBase, false);
            defaultTableMappings3.Add(selfAspNetModelsErrorLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, errorLog.FindProperty("Id")!, selfAspNetModelsErrorLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)accessedColumnBase, errorLog.FindProperty("Accessed")!, selfAspNetModelsErrorLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)messageColumnBase, errorLog.FindProperty("Message")!, selfAspNetModelsErrorLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)pathColumnBase, errorLog.FindProperty("Path")!, selfAspNetModelsErrorLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)stacktraceColumnBase, errorLog.FindProperty("Stacktrace")!, selfAspNetModelsErrorLogMappingBase);

            var tableMappings3 = new List<TableMapping>();
            errorLog.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var errorLogsTable = new Table("ErrorLogs", null, relationalModel);
            var idColumn2 = new Column("Id", "int", errorLogsTable);
            errorLogsTable.Columns.Add("Id", idColumn2);
            var accessedColumn = new Column("Accessed", "datetime2", errorLogsTable);
            errorLogsTable.Columns.Add("Accessed", accessedColumn);
            var messageColumn = new Column("Message", "nvarchar(max)", errorLogsTable);
            errorLogsTable.Columns.Add("Message", messageColumn);
            var pathColumn = new Column("Path", "nvarchar(max)", errorLogsTable);
            errorLogsTable.Columns.Add("Path", pathColumn);
            var stacktraceColumn = new Column("Stacktrace", "nvarchar(max)", errorLogsTable);
            errorLogsTable.Columns.Add("Stacktrace", stacktraceColumn);
            var pK_ErrorLogs = new UniqueConstraint("PK_ErrorLogs", errorLogsTable, new[] { idColumn2 });
            errorLogsTable.PrimaryKey = pK_ErrorLogs;
            var pK_ErrorLogsUc = RelationalModel.GetKey(this,
                "SelfAspNet.Models.ErrorLog",
                new[] { "Id" });
            pK_ErrorLogs.MappedKeys.Add(pK_ErrorLogsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ErrorLogsUc).Add(pK_ErrorLogs);
            errorLogsTable.UniqueConstraints.Add("PK_ErrorLogs", pK_ErrorLogs);
            relationalModel.Tables.Add(("ErrorLogs", null), errorLogsTable);
            var errorLogsTableMapping = new TableMapping(errorLog, errorLogsTable, true);
            errorLogsTable.AddTypeMapping(errorLogsTableMapping, false);
            tableMappings3.Add(errorLogsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, errorLog.FindProperty("Id")!, errorLogsTableMapping);
            RelationalModel.CreateColumnMapping(accessedColumn, errorLog.FindProperty("Accessed")!, errorLogsTableMapping);
            RelationalModel.CreateColumnMapping(messageColumn, errorLog.FindProperty("Message")!, errorLogsTableMapping);
            RelationalModel.CreateColumnMapping(pathColumn, errorLog.FindProperty("Path")!, errorLogsTableMapping);
            RelationalModel.CreateColumnMapping(stacktraceColumn, errorLog.FindProperty("Stacktrace")!, errorLogsTableMapping);

            var meta = FindEntityType("SelfAspNet.Models.Meta")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            meta.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var selfAspNetModelsMetaTableBase = new TableBase("SelfAspNet.Models.Meta", null, relationalModel);
            var actionColumnBase = new ColumnBase<ColumnMappingBase>("Action", "nvarchar(max)", selfAspNetModelsMetaTableBase);
            selfAspNetModelsMetaTableBase.Columns.Add("Action", actionColumnBase);
            var contentColumnBase = new ColumnBase<ColumnMappingBase>("Content", "nvarchar(max)", selfAspNetModelsMetaTableBase);
            selfAspNetModelsMetaTableBase.Columns.Add("Content", contentColumnBase);
            var controllerColumnBase = new ColumnBase<ColumnMappingBase>("Controller", "nvarchar(max)", selfAspNetModelsMetaTableBase);
            selfAspNetModelsMetaTableBase.Columns.Add("Controller", controllerColumnBase);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("Id", "int", selfAspNetModelsMetaTableBase);
            selfAspNetModelsMetaTableBase.Columns.Add("Id", idColumnBase3);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(max)", selfAspNetModelsMetaTableBase);
            selfAspNetModelsMetaTableBase.Columns.Add("Name", nameColumnBase);
            relationalModel.DefaultTables.Add("SelfAspNet.Models.Meta", selfAspNetModelsMetaTableBase);
            var selfAspNetModelsMetaMappingBase = new TableMappingBase<ColumnMappingBase>(meta, selfAspNetModelsMetaTableBase, true);
            selfAspNetModelsMetaTableBase.AddTypeMapping(selfAspNetModelsMetaMappingBase, false);
            defaultTableMappings4.Add(selfAspNetModelsMetaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, meta.FindProperty("Id")!, selfAspNetModelsMetaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)actionColumnBase, meta.FindProperty("Action")!, selfAspNetModelsMetaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)contentColumnBase, meta.FindProperty("Content")!, selfAspNetModelsMetaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)controllerColumnBase, meta.FindProperty("Controller")!, selfAspNetModelsMetaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, meta.FindProperty("Name")!, selfAspNetModelsMetaMappingBase);

            var tableMappings4 = new List<TableMapping>();
            meta.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var metasTable = new Table("Metas", null, relationalModel);
            var idColumn3 = new Column("Id", "int", metasTable);
            metasTable.Columns.Add("Id", idColumn3);
            var actionColumn = new Column("Action", "nvarchar(max)", metasTable);
            metasTable.Columns.Add("Action", actionColumn);
            var contentColumn = new Column("Content", "nvarchar(max)", metasTable);
            metasTable.Columns.Add("Content", contentColumn);
            var controllerColumn = new Column("Controller", "nvarchar(max)", metasTable);
            metasTable.Columns.Add("Controller", controllerColumn);
            var nameColumn = new Column("Name", "nvarchar(max)", metasTable);
            metasTable.Columns.Add("Name", nameColumn);
            var pK_Metas = new UniqueConstraint("PK_Metas", metasTable, new[] { idColumn3 });
            metasTable.PrimaryKey = pK_Metas;
            var pK_MetasUc = RelationalModel.GetKey(this,
                "SelfAspNet.Models.Meta",
                new[] { "Id" });
            pK_Metas.MappedKeys.Add(pK_MetasUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_MetasUc).Add(pK_Metas);
            metasTable.UniqueConstraints.Add("PK_Metas", pK_Metas);
            relationalModel.Tables.Add(("Metas", null), metasTable);
            var metasTableMapping = new TableMapping(meta, metasTable, true);
            metasTable.AddTypeMapping(metasTableMapping, false);
            tableMappings4.Add(metasTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, meta.FindProperty("Id")!, metasTableMapping);
            RelationalModel.CreateColumnMapping(actionColumn, meta.FindProperty("Action")!, metasTableMapping);
            RelationalModel.CreateColumnMapping(contentColumn, meta.FindProperty("Content")!, metasTableMapping);
            RelationalModel.CreateColumnMapping(controllerColumn, meta.FindProperty("Controller")!, metasTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, meta.FindProperty("Name")!, metasTableMapping);

            var review = FindEntityType("SelfAspNet.Models.Review")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            review.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var selfAspNetModelsReviewTableBase = new TableBase("SelfAspNet.Models.Review", null, relationalModel);
            var bodyColumnBase = new ColumnBase<ColumnMappingBase>("Body", "nvarchar(max)", selfAspNetModelsReviewTableBase);
            selfAspNetModelsReviewTableBase.Columns.Add("Body", bodyColumnBase);
            var bookIdColumnBase = new ColumnBase<ColumnMappingBase>("BookId", "int", selfAspNetModelsReviewTableBase);
            selfAspNetModelsReviewTableBase.Columns.Add("BookId", bookIdColumnBase);
            var idColumnBase4 = new ColumnBase<ColumnMappingBase>("Id", "int", selfAspNetModelsReviewTableBase);
            selfAspNetModelsReviewTableBase.Columns.Add("Id", idColumnBase4);
            var lastUpdatedColumnBase = new ColumnBase<ColumnMappingBase>("LastUpdated", "datetime2", selfAspNetModelsReviewTableBase);
            selfAspNetModelsReviewTableBase.Columns.Add("LastUpdated", lastUpdatedColumnBase);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(max)", selfAspNetModelsReviewTableBase);
            selfAspNetModelsReviewTableBase.Columns.Add("Name", nameColumnBase0);
            relationalModel.DefaultTables.Add("SelfAspNet.Models.Review", selfAspNetModelsReviewTableBase);
            var selfAspNetModelsReviewMappingBase = new TableMappingBase<ColumnMappingBase>(review, selfAspNetModelsReviewTableBase, true);
            selfAspNetModelsReviewTableBase.AddTypeMapping(selfAspNetModelsReviewMappingBase, false);
            defaultTableMappings5.Add(selfAspNetModelsReviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase4, review.FindProperty("Id")!, selfAspNetModelsReviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)bodyColumnBase, review.FindProperty("Body")!, selfAspNetModelsReviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)bookIdColumnBase, review.FindProperty("BookId")!, selfAspNetModelsReviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastUpdatedColumnBase, review.FindProperty("LastUpdated")!, selfAspNetModelsReviewMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, review.FindProperty("Name")!, selfAspNetModelsReviewMappingBase);

            var tableMappings5 = new List<TableMapping>();
            review.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var reviewsTable = new Table("Reviews", null, relationalModel);
            var idColumn4 = new Column("Id", "int", reviewsTable);
            reviewsTable.Columns.Add("Id", idColumn4);
            var bodyColumn = new Column("Body", "nvarchar(max)", reviewsTable);
            reviewsTable.Columns.Add("Body", bodyColumn);
            var bookIdColumn = new Column("BookId", "int", reviewsTable);
            reviewsTable.Columns.Add("BookId", bookIdColumn);
            var lastUpdatedColumn = new Column("LastUpdated", "datetime2", reviewsTable);
            reviewsTable.Columns.Add("LastUpdated", lastUpdatedColumn);
            var nameColumn0 = new Column("Name", "nvarchar(max)", reviewsTable);
            reviewsTable.Columns.Add("Name", nameColumn0);
            var pK_Reviews = new UniqueConstraint("PK_Reviews", reviewsTable, new[] { idColumn4 });
            reviewsTable.PrimaryKey = pK_Reviews;
            var pK_ReviewsUc = RelationalModel.GetKey(this,
                "SelfAspNet.Models.Review",
                new[] { "Id" });
            pK_Reviews.MappedKeys.Add(pK_ReviewsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ReviewsUc).Add(pK_Reviews);
            reviewsTable.UniqueConstraints.Add("PK_Reviews", pK_Reviews);
            var iX_Reviews_BookId = new TableIndex(
            "IX_Reviews_BookId", reviewsTable, new[] { bookIdColumn }, false);
            var iX_Reviews_BookIdIx = RelationalModel.GetIndex(this,
                "SelfAspNet.Models.Review",
                new[] { "BookId" });
            iX_Reviews_BookId.MappedIndexes.Add(iX_Reviews_BookIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Reviews_BookIdIx).Add(iX_Reviews_BookId);
            reviewsTable.Indexes.Add("IX_Reviews_BookId", iX_Reviews_BookId);
            relationalModel.Tables.Add(("Reviews", null), reviewsTable);
            var reviewsTableMapping = new TableMapping(review, reviewsTable, true);
            reviewsTable.AddTypeMapping(reviewsTableMapping, false);
            tableMappings5.Add(reviewsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn4, review.FindProperty("Id")!, reviewsTableMapping);
            RelationalModel.CreateColumnMapping(bodyColumn, review.FindProperty("Body")!, reviewsTableMapping);
            RelationalModel.CreateColumnMapping(bookIdColumn, review.FindProperty("BookId")!, reviewsTableMapping);
            RelationalModel.CreateColumnMapping(lastUpdatedColumn, review.FindProperty("LastUpdated")!, reviewsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, review.FindProperty("Name")!, reviewsTableMapping);

            var user = FindEntityType("SelfAspNet.Models.User")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            user.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var selfAspNetModelsUserTableBase = new TableBase("SelfAspNet.Models.User", null, relationalModel);
            var birthColumnBase = new ColumnBase<ColumnMappingBase>("Birth", "datetime2", selfAspNetModelsUserTableBase);
            selfAspNetModelsUserTableBase.Columns.Add("Birth", birthColumnBase);
            var emailColumnBase = new ColumnBase<ColumnMappingBase>("Email", "nvarchar(max)", selfAspNetModelsUserTableBase);
            selfAspNetModelsUserTableBase.Columns.Add("Email", emailColumnBase);
            var idColumnBase5 = new ColumnBase<ColumnMappingBase>("Id", "int", selfAspNetModelsUserTableBase);
            selfAspNetModelsUserTableBase.Columns.Add("Id", idColumnBase5);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("Name", "nvarchar(max)", selfAspNetModelsUserTableBase);
            selfAspNetModelsUserTableBase.Columns.Add("Name", nameColumnBase1);
            relationalModel.DefaultTables.Add("SelfAspNet.Models.User", selfAspNetModelsUserTableBase);
            var selfAspNetModelsUserMappingBase = new TableMappingBase<ColumnMappingBase>(user, selfAspNetModelsUserTableBase, true);
            selfAspNetModelsUserTableBase.AddTypeMapping(selfAspNetModelsUserMappingBase, false);
            defaultTableMappings6.Add(selfAspNetModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase5, user.FindProperty("Id")!, selfAspNetModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)birthColumnBase, user.FindProperty("Birth")!, selfAspNetModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emailColumnBase, user.FindProperty("Email")!, selfAspNetModelsUserMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, user.FindProperty("Name")!, selfAspNetModelsUserMappingBase);

            var tableMappings6 = new List<TableMapping>();
            user.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var usersTable = new Table("Users", null, relationalModel);
            var idColumn5 = new Column("Id", "int", usersTable);
            usersTable.Columns.Add("Id", idColumn5);
            var birthColumn = new Column("Birth", "datetime2", usersTable);
            usersTable.Columns.Add("Birth", birthColumn);
            var emailColumn = new Column("Email", "nvarchar(max)", usersTable);
            usersTable.Columns.Add("Email", emailColumn);
            var nameColumn1 = new Column("Name", "nvarchar(max)", usersTable);
            usersTable.Columns.Add("Name", nameColumn1);
            var pK_Users = new UniqueConstraint("PK_Users", usersTable, new[] { idColumn5 });
            usersTable.PrimaryKey = pK_Users;
            var pK_UsersUc = RelationalModel.GetKey(this,
                "SelfAspNet.Models.User",
                new[] { "Id" });
            pK_Users.MappedKeys.Add(pK_UsersUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_UsersUc).Add(pK_Users);
            usersTable.UniqueConstraints.Add("PK_Users", pK_Users);
            relationalModel.Tables.Add(("Users", null), usersTable);
            var usersTableMapping = new TableMapping(user, usersTable, true);
            usersTable.AddTypeMapping(usersTableMapping, false);
            tableMappings6.Add(usersTableMapping);
            RelationalModel.CreateColumnMapping(idColumn5, user.FindProperty("Id")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(birthColumn, user.FindProperty("Birth")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(emailColumn, user.FindProperty("Email")!, usersTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, user.FindProperty("Name")!, usersTableMapping);
            var fK_AuthorBook_Authors_AuthorsId = new ForeignKeyConstraint(
                "FK_AuthorBook_Authors_AuthorsId", authorBookTable, authorsTable,
                new[] { authorsIdColumn },
                authorsTable.FindUniqueConstraint("PK_Authors")!, ReferentialAction.Cascade);
            var fK_AuthorBook_Authors_AuthorsIdFk = RelationalModel.GetForeignKey(this,
                "AuthorBook",
                new[] { "AuthorsId" },
                "SelfAspNet.Models.Author",
                new[] { "Id" });
            fK_AuthorBook_Authors_AuthorsId.MappedForeignKeys.Add(fK_AuthorBook_Authors_AuthorsIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AuthorBook_Authors_AuthorsIdFk).Add(fK_AuthorBook_Authors_AuthorsId);
            authorBookTable.ForeignKeyConstraints.Add(fK_AuthorBook_Authors_AuthorsId);
            authorsTable.ReferencingForeignKeyConstraints.Add(fK_AuthorBook_Authors_AuthorsId);
            var fK_AuthorBook_Books_BooksId = new ForeignKeyConstraint(
                "FK_AuthorBook_Books_BooksId", authorBookTable, booksTable,
                new[] { booksIdColumn },
                booksTable.FindUniqueConstraint("PK_Books")!, ReferentialAction.Cascade);
            var fK_AuthorBook_Books_BooksIdFk = RelationalModel.GetForeignKey(this,
                "AuthorBook",
                new[] { "BooksId" },
                "SelfAspNet.Models.Book",
                new[] { "Id" });
            fK_AuthorBook_Books_BooksId.MappedForeignKeys.Add(fK_AuthorBook_Books_BooksIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_AuthorBook_Books_BooksIdFk).Add(fK_AuthorBook_Books_BooksId);
            authorBookTable.ForeignKeyConstraints.Add(fK_AuthorBook_Books_BooksId);
            booksTable.ReferencingForeignKeyConstraints.Add(fK_AuthorBook_Books_BooksId);
            var fK_Authors_Users_UserId = new ForeignKeyConstraint(
                "FK_Authors_Users_UserId", authorsTable, usersTable,
                new[] { userIdColumn },
                usersTable.FindUniqueConstraint("PK_Users")!, ReferentialAction.Cascade);
            var fK_Authors_Users_UserIdFk = RelationalModel.GetForeignKey(this,
                "SelfAspNet.Models.Author",
                new[] { "UserId" },
                "SelfAspNet.Models.User",
                new[] { "Id" });
            fK_Authors_Users_UserId.MappedForeignKeys.Add(fK_Authors_Users_UserIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Authors_Users_UserIdFk).Add(fK_Authors_Users_UserId);
            authorsTable.ForeignKeyConstraints.Add(fK_Authors_Users_UserId);
            usersTable.ReferencingForeignKeyConstraints.Add(fK_Authors_Users_UserId);
            var fK_Reviews_Books_BookId = new ForeignKeyConstraint(
                "FK_Reviews_Books_BookId", reviewsTable, booksTable,
                new[] { bookIdColumn },
                booksTable.FindUniqueConstraint("PK_Books")!, ReferentialAction.Cascade);
            var fK_Reviews_Books_BookIdFk = RelationalModel.GetForeignKey(this,
                "SelfAspNet.Models.Review",
                new[] { "BookId" },
                "SelfAspNet.Models.Book",
                new[] { "Id" });
            fK_Reviews_Books_BookId.MappedForeignKeys.Add(fK_Reviews_Books_BookIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Reviews_Books_BookIdFk).Add(fK_Reviews_Books_BookId);
            reviewsTable.ForeignKeyConstraints.Add(fK_Reviews_Books_BookId);
            booksTable.ReferencingForeignKeyConstraints.Add(fK_Reviews_Books_BookId);
            return relationalModel.MakeReadOnly();
        }
    }
}
