// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SelfAspNet.Models;

#nullable disable

namespace SelfAspNet.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20240301021121_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorsId")
                        .HasColumnType("int");

                    b.HasKey("BooksId", "AuthorsId");

                    b.HasIndex("AuthorsId");

                    b.ToTable("AuthorBook");

                    b.HasData(
                        new
                        {
                            BooksId = 1,
                            AuthorsId = 1
                        },
                        new
                        {
                            BooksId = 1,
                            AuthorsId = 6
                        },
                        new
                        {
                            BooksId = 2,
                            AuthorsId = 2
                        },
                        new
                        {
                            BooksId = 3,
                            AuthorsId = 1
                        },
                        new
                        {
                            BooksId = 4,
                            AuthorsId = 3
                        },
                        new
                        {
                            BooksId = 5,
                            AuthorsId = 2
                        },
                        new
                        {
                            BooksId = 6,
                            AuthorsId = 1
                        },
                        new
                        {
                            BooksId = 7,
                            AuthorsId = 4
                        },
                        new
                        {
                            BooksId = 8,
                            AuthorsId = 1
                        },
                        new
                        {
                            BooksId = 9,
                            AuthorsId = 1
                        },
                        new
                        {
                            BooksId = 10,
                            AuthorsId = 5
                        });
                });

            modelBuilder.Entity("SelfAspNet.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "JavaScript",
                            CreatedAt = new DateTime(2023, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(2023, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "ますます便利になるTypeScript！",
                            Url = "https://codezine.jp/article/corner/992"
                        },
                        new
                        {
                            Id = 2,
                            Category = "JavaScript",
                            CreatedAt = new DateTime(2023, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(2023, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Remixを通じてWebを学ぶ",
                            Url = "https://codezine.jp/article/corner/942"
                        },
                        new
                        {
                            Id = 3,
                            Category = "JavaScript",
                            CreatedAt = new DateTime(2023, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(2023, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Web Componentsを基礎から学ぶ",
                            Url = "https://codezine.jp/article/corner/927"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Rails",
                            CreatedAt = new DateTime(2023, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(2023, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Railsの新機能を知ろう！",
                            Url = "https://codezine.jp/article/corner/991"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Rails",
                            CreatedAt = new DateTime(2023, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(2023, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Railsによるクライアントサイド開発入門",
                            Url = "https://codezine.jp/article/corner/919"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Rust",
                            CreatedAt = new DateTime(2023, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "現場で役立つRust入門",
                            Url = "https://atmarkit.itmedia.co.jp/ait/series/36943/"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Rust",
                            CreatedAt = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastUpdatedAt = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "基本からしっかり学ぶRust入門",
                            Url = "https://atmarkit.itmedia.co.jp/ait/series/24844/"
                        });
                });

            modelBuilder.Entity("SelfAspNet.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PenName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PenName = "WINGS",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            PenName = "Sarva",
                            UserId = 6
                        },
                        new
                        {
                            Id = 3,
                            PenName = "たまデジ。",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            PenName = "Canon",
                            UserId = 5
                        },
                        new
                        {
                            Id = 5,
                            PenName = "Papier",
                            UserId = 8
                        },
                        new
                        {
                            Id = 6,
                            PenName = "はな",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("SelfAspNet.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sample")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Isbn = "978-4-7981-8094-6",
                            Price = 3960,
                            Published = new DateTime(2024, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "翔泳社",
                            Sample = true,
                            Title = "独習Java"
                        },
                        new
                        {
                            Id = 2,
                            Isbn = "978-4-7981-7613-0",
                            Price = 3135,
                            Published = new DateTime(2023, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "翔泳社",
                            Sample = true,
                            Title = "Androidアプリ開発の教科書"
                        },
                        new
                        {
                            Id = 3,
                            Isbn = "978-4-8156-1948-0",
                            Price = 4400,
                            Published = new DateTime(2023, 9, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "SBクリエイティブ",
                            Sample = true,
                            Title = "これからはじめるReact実践入門"
                        },
                        new
                        {
                            Id = 4,
                            Isbn = "978-4-296-07070-1",
                            Price = 2420,
                            Published = new DateTime(2023, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "日経BP",
                            Sample = false,
                            Title = "作って学べるHTML＋JavaScriptの基本"
                        },
                        new
                        {
                            Id = 5,
                            Isbn = "978-4-297-13685-7",
                            Price = 3520,
                            Published = new DateTime(2023, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "技術評論社",
                            Sample = false,
                            Title = "Nuxt 3 フロントエンド開発の教科書"
                        },
                        new
                        {
                            Id = 6,
                            Isbn = "978-4-297-13288-0",
                            Price = 3520,
                            Published = new DateTime(2023, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "技術評論社",
                            Sample = true,
                            Title = "JavaScript本格入門"
                        },
                        new
                        {
                            Id = 7,
                            Isbn = "978-4-627-85711-7",
                            Price = 2970,
                            Published = new DateTime(2023, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "森北出版",
                            Sample = false,
                            Title = "Pythonでできる! 株価データ分析"
                        },
                        new
                        {
                            Id = 8,
                            Isbn = "978-4-7981-7556-0",
                            Price = 4180,
                            Published = new DateTime(2022, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "翔泳社",
                            Sample = true,
                            Title = "独習C#"
                        },
                        new
                        {
                            Id = 9,
                            Isbn = "978-4-8156-1336-5",
                            Price = 3740,
                            Published = new DateTime(2022, 3, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "SBクリエイティブ",
                            Sample = true,
                            Title = "これからはじめるVue.js 3実践入門"
                        },
                        new
                        {
                            Id = 10,
                            Isbn = "978-4-296-08014-4",
                            Price = 3190,
                            Published = new DateTime(2022, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Publisher = "日経BP",
                            Sample = false,
                            Title = "基礎からしっかり学ぶC#の教科書"
                        });
                });

            modelBuilder.Entity("SelfAspNet.Models.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Accessed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stacktrace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("SelfAspNet.Models.Meta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Metas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "Privacy",
                            Content = "メタ情報",
                            Controller = "Home",
                            Name = "keywords"
                        },
                        new
                        {
                            Id = 2,
                            Action = "Privacy",
                            Content = "ページごとに異なる<meta>要素を生成",
                            Controller = "Home",
                            Name = "description"
                        },
                        new
                        {
                            Id = 3,
                            Action = "Index",
                            Content = "メタ情報取得の別解",
                            Controller = "Tag",
                            Name = "description"
                        });
                });

            modelBuilder.Entity("SelfAspNet.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("SelfAspNet.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "がっつり学習したい人には、うってつけの本です。前半は、キッチリ基礎固めを行い、後半は応用的な内容に。図や用例、構文も多く、辞書代わりにも使えます。",
                            BookId = 1,
                            LastUpdated = new DateTime(2024, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "山田太郎"
                        },
                        new
                        {
                            Id = 2,
                            Body = "環境構築から書かれており初心者から使えますが、分量から見てもわかるように、サラッとは終わらず、説明が深いです。特に「エキスパートに訊く」という読み物が面白い。",
                            BookId = 1,
                            LastUpdated = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "佐藤花子"
                        },
                        new
                        {
                            Id = 3,
                            Body = "コツコツ、独りでじっくり勉強できます。オブジェクト指向プログラミングに紙数が割いてあって、以前、挫折したけど、今回は理解できました。1回目は読み飛ばしたところもあるので、また読み返したいです。",
                            BookId = 1,
                            LastUpdated = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "鈴木次郎"
                        },
                        new
                        {
                            Id = 4,
                            Body = "Androidはすぐにバージョンが上がるので、本を買うのもためらわれるが、この本は、基礎部分がしっかり説明されているので、はじめの一冊にお勧めできます。",
                            BookId = 2,
                            LastUpdated = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "井上裕子"
                        },
                        new
                        {
                            Id = 5,
                            Body = "同様の構成で、Kotlin対応とJava対応があるので、両方手元にあると比較しながら勉強できます。",
                            BookId = 2,
                            LastUpdated = new DateTime(2023, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "田中健太"
                        },
                        new
                        {
                            Id = 6,
                            Body = "テスト、TypeScriptの活用、Next.jsの活用などなど。実践的な内容盛りだくさんで、かなりのボリュームです。サンプルも多く、ダウンロードして実際に動かしながら確認できて、理解が深まります。",
                            BookId = 2,
                            LastUpdated = new DateTime(2023, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "藤井由美"
                        });
                });

            modelBuilder.Entity("SelfAspNet.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NeedNews")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "yyamada@example.com",
                            Name = "山田祥寛",
                            NeedNews = false
                        },
                        new
                        {
                            Id = 2,
                            Birth = new DateTime(1970, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nyamauchi@example.com",
                            Name = "山内直",
                            NeedNews = false
                        },
                        new
                        {
                            Id = 3,
                            Birth = new DateTime(1990, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hsuzuki@example.com",
                            Name = "鈴木花子",
                            NeedNews = false
                        },
                        new
                        {
                            Id = 4,
                            Birth = new DateTime(1992, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "tsato@example.com",
                            Name = "佐藤太郎",
                            NeedNews = false
                        },
                        new
                        {
                            Id = 5,
                            Birth = new DateTime(1985, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kkatafuchi@example.com",
                            Name = "片渕彼富",
                            NeedNews = false
                        },
                        new
                        {
                            Id = 6,
                            Birth = new DateTime(1974, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ssaito@example.com",
                            Name = "齊藤新三",
                            NeedNews = false
                        },
                        new
                        {
                            Id = 7,
                            Birth = new DateTime(2000, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "shanako@example.com",
                            Name = "鈴木花子",
                            NeedNews = false
                        },
                        new
                        {
                            Id = 8,
                            Birth = new DateTime(1978, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ktakae@example.com",
                            Name = "高江賢",
                            NeedNews = false
                        });
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("SelfAspNet.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SelfAspNet.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SelfAspNet.Models.Author", b =>
                {
                    b.HasOne("SelfAspNet.Models.User", "User")
                        .WithOne("Author")
                        .HasForeignKey("SelfAspNet.Models.Author", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SelfAspNet.Models.Review", b =>
                {
                    b.HasOne("SelfAspNet.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("SelfAspNet.Models.Book", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("SelfAspNet.Models.User", b =>
                {
                    b.Navigation("Author");
                });
#pragma warning restore 612, 618
        }
    }
}
